/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var domain_domain_pb = require('../../domain/domain_pb.js');
goog.object.extend(proto, domain_domain_pb);
goog.exportSymbol('proto.service.eos.DeleteAllProductImagesRequest', null, global);
goog.exportSymbol('proto.service.eos.DeleteProductImageRequest', null, global);
goog.exportSymbol('proto.service.eos.DeleteProductItemRequest', null, global);
goog.exportSymbol('proto.service.eos.DeleteProductRequest', null, global);
goog.exportSymbol('proto.service.eos.GetByIDRequest', null, global);
goog.exportSymbol('proto.service.eos.GetNameFromPubRequest', null, global);
goog.exportSymbol('proto.service.eos.GetNameFromPubResponse', null, global);
goog.exportSymbol('proto.service.eos.GetPubFromNameRequest', null, global);
goog.exportSymbol('proto.service.eos.GetPubFromNameResponse', null, global);
goog.exportSymbol('proto.service.eos.GetPubFromPrivRequest', null, global);
goog.exportSymbol('proto.service.eos.GetPubFromPrivResponse', null, global);
goog.exportSymbol('proto.service.eos.NewEventRequest', null, global);
goog.exportSymbol('proto.service.eos.NewProductImageRequest', null, global);
goog.exportSymbol('proto.service.eos.NewProductItemRequest', null, global);
goog.exportSymbol('proto.service.eos.NewProductRequest', null, global);
goog.exportSymbol('proto.service.eos.UpdateProductRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.GetByIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.GetByIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.GetByIDRequest.displayName = 'proto.service.eos.GetByIDRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.GetByIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.GetByIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.GetByIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetByIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.GetByIDRequest}
 */
proto.service.eos.GetByIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.GetByIDRequest;
  return proto.service.eos.GetByIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.GetByIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.GetByIDRequest}
 */
proto.service.eos.GetByIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.GetByIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.GetByIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.GetByIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetByIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.service.eos.GetByIDRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.eos.GetByIDRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.NewProductRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.NewProductRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.NewProductRequest.displayName = 'proto.service.eos.NewProductRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.NewProductRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.NewProductRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.NewProductRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.NewProductRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    product: (f = msg.getProduct()) && domain_domain_pb.Product.toObject(includeInstance, f),
    eosAccount: (f = msg.getEosAccount()) && domain_domain_pb.EosAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.NewProductRequest}
 */
proto.service.eos.NewProductRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.NewProductRequest;
  return proto.service.eos.NewProductRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.NewProductRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.NewProductRequest}
 */
proto.service.eos.NewProductRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_domain_pb.Product;
      reader.readMessage(value,domain_domain_pb.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 2:
      var value = new domain_domain_pb.EosAccount;
      reader.readMessage(value,domain_domain_pb.EosAccount.deserializeBinaryFromReader);
      msg.setEosAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.NewProductRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.NewProductRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.NewProductRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.NewProductRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_domain_pb.Product.serializeBinaryToWriter
    );
  }
  f = message.getEosAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      domain_domain_pb.EosAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional domain.Product product = 1;
 * @return {?proto.domain.Product}
 */
proto.service.eos.NewProductRequest.prototype.getProduct = function() {
  return /** @type{?proto.domain.Product} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.Product, 1));
};


/** @param {?proto.domain.Product|undefined} value */
proto.service.eos.NewProductRequest.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.service.eos.NewProductRequest.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.NewProductRequest.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional domain.EosAccount eos_account = 2;
 * @return {?proto.domain.EosAccount}
 */
proto.service.eos.NewProductRequest.prototype.getEosAccount = function() {
  return /** @type{?proto.domain.EosAccount} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.EosAccount, 2));
};


/** @param {?proto.domain.EosAccount|undefined} value */
proto.service.eos.NewProductRequest.prototype.setEosAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.service.eos.NewProductRequest.prototype.clearEosAccount = function() {
  this.setEosAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.NewProductRequest.prototype.hasEosAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.DeleteProductRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.DeleteProductRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.DeleteProductRequest.displayName = 'proto.service.eos.DeleteProductRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.DeleteProductRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.DeleteProductRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.DeleteProductRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.DeleteProductRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    productId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eosAccount: (f = msg.getEosAccount()) && domain_domain_pb.EosAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.DeleteProductRequest}
 */
proto.service.eos.DeleteProductRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.DeleteProductRequest;
  return proto.service.eos.DeleteProductRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.DeleteProductRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.DeleteProductRequest}
 */
proto.service.eos.DeleteProductRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductId(value);
      break;
    case 2:
      var value = new domain_domain_pb.EosAccount;
      reader.readMessage(value,domain_domain_pb.EosAccount.deserializeBinaryFromReader);
      msg.setEosAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.DeleteProductRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.DeleteProductRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.DeleteProductRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.DeleteProductRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEosAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      domain_domain_pb.EosAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional string product_id = 1;
 * @return {string}
 */
proto.service.eos.DeleteProductRequest.prototype.getProductId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.eos.DeleteProductRequest.prototype.setProductId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional domain.EosAccount eos_account = 2;
 * @return {?proto.domain.EosAccount}
 */
proto.service.eos.DeleteProductRequest.prototype.getEosAccount = function() {
  return /** @type{?proto.domain.EosAccount} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.EosAccount, 2));
};


/** @param {?proto.domain.EosAccount|undefined} value */
proto.service.eos.DeleteProductRequest.prototype.setEosAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.service.eos.DeleteProductRequest.prototype.clearEosAccount = function() {
  this.setEosAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.DeleteProductRequest.prototype.hasEosAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.UpdateProductRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.UpdateProductRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.UpdateProductRequest.displayName = 'proto.service.eos.UpdateProductRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.UpdateProductRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.UpdateProductRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.UpdateProductRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.UpdateProductRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    productId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    product: (f = msg.getProduct()) && domain_domain_pb.Product.toObject(includeInstance, f),
    eosAccount: (f = msg.getEosAccount()) && domain_domain_pb.EosAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.UpdateProductRequest}
 */
proto.service.eos.UpdateProductRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.UpdateProductRequest;
  return proto.service.eos.UpdateProductRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.UpdateProductRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.UpdateProductRequest}
 */
proto.service.eos.UpdateProductRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductId(value);
      break;
    case 1:
      var value = new domain_domain_pb.Product;
      reader.readMessage(value,domain_domain_pb.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    case 2:
      var value = new domain_domain_pb.EosAccount;
      reader.readMessage(value,domain_domain_pb.EosAccount.deserializeBinaryFromReader);
      msg.setEosAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.UpdateProductRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.UpdateProductRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.UpdateProductRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.UpdateProductRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_domain_pb.Product.serializeBinaryToWriter
    );
  }
  f = message.getEosAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      domain_domain_pb.EosAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional string product_id = 3;
 * @return {string}
 */
proto.service.eos.UpdateProductRequest.prototype.getProductId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.service.eos.UpdateProductRequest.prototype.setProductId = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional domain.Product product = 1;
 * @return {?proto.domain.Product}
 */
proto.service.eos.UpdateProductRequest.prototype.getProduct = function() {
  return /** @type{?proto.domain.Product} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.Product, 1));
};


/** @param {?proto.domain.Product|undefined} value */
proto.service.eos.UpdateProductRequest.prototype.setProduct = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.service.eos.UpdateProductRequest.prototype.clearProduct = function() {
  this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.UpdateProductRequest.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional domain.EosAccount eos_account = 2;
 * @return {?proto.domain.EosAccount}
 */
proto.service.eos.UpdateProductRequest.prototype.getEosAccount = function() {
  return /** @type{?proto.domain.EosAccount} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.EosAccount, 2));
};


/** @param {?proto.domain.EosAccount|undefined} value */
proto.service.eos.UpdateProductRequest.prototype.setEosAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.service.eos.UpdateProductRequest.prototype.clearEosAccount = function() {
  this.setEosAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.UpdateProductRequest.prototype.hasEosAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.NewProductItemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.NewProductItemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.NewProductItemRequest.displayName = 'proto.service.eos.NewProductItemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.NewProductItemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.NewProductItemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.NewProductItemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.NewProductItemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    productItem: (f = msg.getProductItem()) && domain_domain_pb.ProductItem.toObject(includeInstance, f),
    eosAccount: (f = msg.getEosAccount()) && domain_domain_pb.EosAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.NewProductItemRequest}
 */
proto.service.eos.NewProductItemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.NewProductItemRequest;
  return proto.service.eos.NewProductItemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.NewProductItemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.NewProductItemRequest}
 */
proto.service.eos.NewProductItemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_domain_pb.ProductItem;
      reader.readMessage(value,domain_domain_pb.ProductItem.deserializeBinaryFromReader);
      msg.setProductItem(value);
      break;
    case 2:
      var value = new domain_domain_pb.EosAccount;
      reader.readMessage(value,domain_domain_pb.EosAccount.deserializeBinaryFromReader);
      msg.setEosAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.NewProductItemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.NewProductItemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.NewProductItemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.NewProductItemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_domain_pb.ProductItem.serializeBinaryToWriter
    );
  }
  f = message.getEosAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      domain_domain_pb.EosAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional domain.ProductItem product_item = 1;
 * @return {?proto.domain.ProductItem}
 */
proto.service.eos.NewProductItemRequest.prototype.getProductItem = function() {
  return /** @type{?proto.domain.ProductItem} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.ProductItem, 1));
};


/** @param {?proto.domain.ProductItem|undefined} value */
proto.service.eos.NewProductItemRequest.prototype.setProductItem = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.service.eos.NewProductItemRequest.prototype.clearProductItem = function() {
  this.setProductItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.NewProductItemRequest.prototype.hasProductItem = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional domain.EosAccount eos_account = 2;
 * @return {?proto.domain.EosAccount}
 */
proto.service.eos.NewProductItemRequest.prototype.getEosAccount = function() {
  return /** @type{?proto.domain.EosAccount} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.EosAccount, 2));
};


/** @param {?proto.domain.EosAccount|undefined} value */
proto.service.eos.NewProductItemRequest.prototype.setEosAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.service.eos.NewProductItemRequest.prototype.clearEosAccount = function() {
  this.setEosAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.NewProductItemRequest.prototype.hasEosAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.DeleteProductItemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.DeleteProductItemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.DeleteProductItemRequest.displayName = 'proto.service.eos.DeleteProductItemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.DeleteProductItemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.DeleteProductItemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.DeleteProductItemRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.DeleteProductItemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    productItemId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eosAccount: (f = msg.getEosAccount()) && domain_domain_pb.EosAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.DeleteProductItemRequest}
 */
proto.service.eos.DeleteProductItemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.DeleteProductItemRequest;
  return proto.service.eos.DeleteProductItemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.DeleteProductItemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.DeleteProductItemRequest}
 */
proto.service.eos.DeleteProductItemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductItemId(value);
      break;
    case 2:
      var value = new domain_domain_pb.EosAccount;
      reader.readMessage(value,domain_domain_pb.EosAccount.deserializeBinaryFromReader);
      msg.setEosAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.DeleteProductItemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.DeleteProductItemRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.DeleteProductItemRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.DeleteProductItemRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductItemId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEosAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      domain_domain_pb.EosAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional string product_item_id = 1;
 * @return {string}
 */
proto.service.eos.DeleteProductItemRequest.prototype.getProductItemId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.eos.DeleteProductItemRequest.prototype.setProductItemId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional domain.EosAccount eos_account = 2;
 * @return {?proto.domain.EosAccount}
 */
proto.service.eos.DeleteProductItemRequest.prototype.getEosAccount = function() {
  return /** @type{?proto.domain.EosAccount} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.EosAccount, 2));
};


/** @param {?proto.domain.EosAccount|undefined} value */
proto.service.eos.DeleteProductItemRequest.prototype.setEosAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.service.eos.DeleteProductItemRequest.prototype.clearEosAccount = function() {
  this.setEosAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.DeleteProductItemRequest.prototype.hasEosAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.NewProductImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.NewProductImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.NewProductImageRequest.displayName = 'proto.service.eos.NewProductImageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.NewProductImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.NewProductImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.NewProductImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.NewProductImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    productImage: (f = msg.getProductImage()) && domain_domain_pb.ProductImage.toObject(includeInstance, f),
    eosAccount: (f = msg.getEosAccount()) && domain_domain_pb.EosAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.NewProductImageRequest}
 */
proto.service.eos.NewProductImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.NewProductImageRequest;
  return proto.service.eos.NewProductImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.NewProductImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.NewProductImageRequest}
 */
proto.service.eos.NewProductImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_domain_pb.ProductImage;
      reader.readMessage(value,domain_domain_pb.ProductImage.deserializeBinaryFromReader);
      msg.setProductImage(value);
      break;
    case 2:
      var value = new domain_domain_pb.EosAccount;
      reader.readMessage(value,domain_domain_pb.EosAccount.deserializeBinaryFromReader);
      msg.setEosAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.NewProductImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.NewProductImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.NewProductImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.NewProductImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductImage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_domain_pb.ProductImage.serializeBinaryToWriter
    );
  }
  f = message.getEosAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      domain_domain_pb.EosAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional domain.ProductImage product_image = 1;
 * @return {?proto.domain.ProductImage}
 */
proto.service.eos.NewProductImageRequest.prototype.getProductImage = function() {
  return /** @type{?proto.domain.ProductImage} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.ProductImage, 1));
};


/** @param {?proto.domain.ProductImage|undefined} value */
proto.service.eos.NewProductImageRequest.prototype.setProductImage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.service.eos.NewProductImageRequest.prototype.clearProductImage = function() {
  this.setProductImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.NewProductImageRequest.prototype.hasProductImage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional domain.EosAccount eos_account = 2;
 * @return {?proto.domain.EosAccount}
 */
proto.service.eos.NewProductImageRequest.prototype.getEosAccount = function() {
  return /** @type{?proto.domain.EosAccount} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.EosAccount, 2));
};


/** @param {?proto.domain.EosAccount|undefined} value */
proto.service.eos.NewProductImageRequest.prototype.setEosAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.service.eos.NewProductImageRequest.prototype.clearEosAccount = function() {
  this.setEosAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.NewProductImageRequest.prototype.hasEosAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.DeleteProductImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.DeleteProductImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.DeleteProductImageRequest.displayName = 'proto.service.eos.DeleteProductImageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.DeleteProductImageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.DeleteProductImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.DeleteProductImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.DeleteProductImageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eosAccount: (f = msg.getEosAccount()) && domain_domain_pb.EosAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.DeleteProductImageRequest}
 */
proto.service.eos.DeleteProductImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.DeleteProductImageRequest;
  return proto.service.eos.DeleteProductImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.DeleteProductImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.DeleteProductImageRequest}
 */
proto.service.eos.DeleteProductImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new domain_domain_pb.EosAccount;
      reader.readMessage(value,domain_domain_pb.EosAccount.deserializeBinaryFromReader);
      msg.setEosAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.DeleteProductImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.DeleteProductImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.DeleteProductImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.DeleteProductImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEosAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      domain_domain_pb.EosAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.service.eos.DeleteProductImageRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.eos.DeleteProductImageRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional domain.EosAccount eos_account = 2;
 * @return {?proto.domain.EosAccount}
 */
proto.service.eos.DeleteProductImageRequest.prototype.getEosAccount = function() {
  return /** @type{?proto.domain.EosAccount} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.EosAccount, 2));
};


/** @param {?proto.domain.EosAccount|undefined} value */
proto.service.eos.DeleteProductImageRequest.prototype.setEosAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.service.eos.DeleteProductImageRequest.prototype.clearEosAccount = function() {
  this.setEosAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.DeleteProductImageRequest.prototype.hasEosAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.DeleteAllProductImagesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.DeleteAllProductImagesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.DeleteAllProductImagesRequest.displayName = 'proto.service.eos.DeleteAllProductImagesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.DeleteAllProductImagesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.DeleteAllProductImagesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.DeleteAllProductImagesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.DeleteAllProductImagesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    productId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    eosAccount: (f = msg.getEosAccount()) && domain_domain_pb.EosAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.DeleteAllProductImagesRequest}
 */
proto.service.eos.DeleteAllProductImagesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.DeleteAllProductImagesRequest;
  return proto.service.eos.DeleteAllProductImagesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.DeleteAllProductImagesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.DeleteAllProductImagesRequest}
 */
proto.service.eos.DeleteAllProductImagesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProductId(value);
      break;
    case 2:
      var value = new domain_domain_pb.EosAccount;
      reader.readMessage(value,domain_domain_pb.EosAccount.deserializeBinaryFromReader);
      msg.setEosAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.DeleteAllProductImagesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.DeleteAllProductImagesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.DeleteAllProductImagesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.DeleteAllProductImagesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProductId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEosAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      domain_domain_pb.EosAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional string product_id = 1;
 * @return {string}
 */
proto.service.eos.DeleteAllProductImagesRequest.prototype.getProductId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.eos.DeleteAllProductImagesRequest.prototype.setProductId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional domain.EosAccount eos_account = 2;
 * @return {?proto.domain.EosAccount}
 */
proto.service.eos.DeleteAllProductImagesRequest.prototype.getEosAccount = function() {
  return /** @type{?proto.domain.EosAccount} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.EosAccount, 2));
};


/** @param {?proto.domain.EosAccount|undefined} value */
proto.service.eos.DeleteAllProductImagesRequest.prototype.setEosAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.service.eos.DeleteAllProductImagesRequest.prototype.clearEosAccount = function() {
  this.setEosAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.DeleteAllProductImagesRequest.prototype.hasEosAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.NewEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.NewEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.NewEventRequest.displayName = 'proto.service.eos.NewEventRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.NewEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.NewEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.NewEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.NewEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    event: (f = msg.getEvent()) && domain_domain_pb.Event.toObject(includeInstance, f),
    eosAccount: (f = msg.getEosAccount()) && domain_domain_pb.EosAccount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.NewEventRequest}
 */
proto.service.eos.NewEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.NewEventRequest;
  return proto.service.eos.NewEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.NewEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.NewEventRequest}
 */
proto.service.eos.NewEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new domain_domain_pb.Event;
      reader.readMessage(value,domain_domain_pb.Event.deserializeBinaryFromReader);
      msg.setEvent(value);
      break;
    case 2:
      var value = new domain_domain_pb.EosAccount;
      reader.readMessage(value,domain_domain_pb.EosAccount.deserializeBinaryFromReader);
      msg.setEosAccount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.NewEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.NewEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.NewEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.NewEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      domain_domain_pb.Event.serializeBinaryToWriter
    );
  }
  f = message.getEosAccount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      domain_domain_pb.EosAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional domain.Event event = 1;
 * @return {?proto.domain.Event}
 */
proto.service.eos.NewEventRequest.prototype.getEvent = function() {
  return /** @type{?proto.domain.Event} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.Event, 1));
};


/** @param {?proto.domain.Event|undefined} value */
proto.service.eos.NewEventRequest.prototype.setEvent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.service.eos.NewEventRequest.prototype.clearEvent = function() {
  this.setEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.NewEventRequest.prototype.hasEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional domain.EosAccount eos_account = 2;
 * @return {?proto.domain.EosAccount}
 */
proto.service.eos.NewEventRequest.prototype.getEosAccount = function() {
  return /** @type{?proto.domain.EosAccount} */ (
    jspb.Message.getWrapperField(this, domain_domain_pb.EosAccount, 2));
};


/** @param {?proto.domain.EosAccount|undefined} value */
proto.service.eos.NewEventRequest.prototype.setEosAccount = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.service.eos.NewEventRequest.prototype.clearEosAccount = function() {
  this.setEosAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.service.eos.NewEventRequest.prototype.hasEosAccount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.GetPubFromPrivRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.GetPubFromPrivRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.GetPubFromPrivRequest.displayName = 'proto.service.eos.GetPubFromPrivRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.GetPubFromPrivRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.GetPubFromPrivRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.GetPubFromPrivRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetPubFromPrivRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    privateKey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.GetPubFromPrivRequest}
 */
proto.service.eos.GetPubFromPrivRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.GetPubFromPrivRequest;
  return proto.service.eos.GetPubFromPrivRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.GetPubFromPrivRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.GetPubFromPrivRequest}
 */
proto.service.eos.GetPubFromPrivRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivateKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.GetPubFromPrivRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.GetPubFromPrivRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.GetPubFromPrivRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetPubFromPrivRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrivateKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string private_key = 1;
 * @return {string}
 */
proto.service.eos.GetPubFromPrivRequest.prototype.getPrivateKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.eos.GetPubFromPrivRequest.prototype.setPrivateKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.GetPubFromPrivResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.GetPubFromPrivResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.GetPubFromPrivResponse.displayName = 'proto.service.eos.GetPubFromPrivResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.GetPubFromPrivResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.GetPubFromPrivResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.GetPubFromPrivResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetPubFromPrivResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.GetPubFromPrivResponse}
 */
proto.service.eos.GetPubFromPrivResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.GetPubFromPrivResponse;
  return proto.service.eos.GetPubFromPrivResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.GetPubFromPrivResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.GetPubFromPrivResponse}
 */
proto.service.eos.GetPubFromPrivResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.GetPubFromPrivResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.GetPubFromPrivResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.GetPubFromPrivResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetPubFromPrivResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string public_key = 1;
 * @return {string}
 */
proto.service.eos.GetPubFromPrivResponse.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.eos.GetPubFromPrivResponse.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.GetNameFromPubRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.GetNameFromPubRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.GetNameFromPubRequest.displayName = 'proto.service.eos.GetNameFromPubRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.GetNameFromPubRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.GetNameFromPubRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.GetNameFromPubRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetNameFromPubRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.GetNameFromPubRequest}
 */
proto.service.eos.GetNameFromPubRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.GetNameFromPubRequest;
  return proto.service.eos.GetNameFromPubRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.GetNameFromPubRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.GetNameFromPubRequest}
 */
proto.service.eos.GetNameFromPubRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.GetNameFromPubRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.GetNameFromPubRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.GetNameFromPubRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetNameFromPubRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string public_key = 1;
 * @return {string}
 */
proto.service.eos.GetNameFromPubRequest.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.eos.GetNameFromPubRequest.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.GetNameFromPubResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.GetNameFromPubResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.GetNameFromPubResponse.displayName = 'proto.service.eos.GetNameFromPubResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.GetNameFromPubResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.GetNameFromPubResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.GetNameFromPubResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetNameFromPubResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.GetNameFromPubResponse}
 */
proto.service.eos.GetNameFromPubResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.GetNameFromPubResponse;
  return proto.service.eos.GetNameFromPubResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.GetNameFromPubResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.GetNameFromPubResponse}
 */
proto.service.eos.GetNameFromPubResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.GetNameFromPubResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.GetNameFromPubResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.GetNameFromPubResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetNameFromPubResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.service.eos.GetNameFromPubResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.eos.GetNameFromPubResponse.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.GetPubFromNameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.GetPubFromNameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.GetPubFromNameRequest.displayName = 'proto.service.eos.GetPubFromNameRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.GetPubFromNameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.GetPubFromNameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.GetPubFromNameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetPubFromNameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.GetPubFromNameRequest}
 */
proto.service.eos.GetPubFromNameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.GetPubFromNameRequest;
  return proto.service.eos.GetPubFromNameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.GetPubFromNameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.GetPubFromNameRequest}
 */
proto.service.eos.GetPubFromNameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.GetPubFromNameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.GetPubFromNameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.GetPubFromNameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetPubFromNameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.service.eos.GetPubFromNameRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.eos.GetPubFromNameRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.service.eos.GetPubFromNameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.service.eos.GetPubFromNameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.service.eos.GetPubFromNameResponse.displayName = 'proto.service.eos.GetPubFromNameResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.service.eos.GetPubFromNameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.service.eos.GetPubFromNameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.service.eos.GetPubFromNameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetPubFromNameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.service.eos.GetPubFromNameResponse}
 */
proto.service.eos.GetPubFromNameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.service.eos.GetPubFromNameResponse;
  return proto.service.eos.GetPubFromNameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.service.eos.GetPubFromNameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.service.eos.GetPubFromNameResponse}
 */
proto.service.eos.GetPubFromNameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.service.eos.GetPubFromNameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.service.eos.GetPubFromNameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.service.eos.GetPubFromNameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.service.eos.GetPubFromNameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string public_key = 1;
 * @return {string}
 */
proto.service.eos.GetPubFromNameResponse.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.service.eos.GetPubFromNameResponse.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.service.eos);
